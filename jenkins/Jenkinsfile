def getClusterManagerVersion(String branchName='master'){
  sh returnStdout:true, script: """
    eval "\$(curl 'https://raw.githubusercontent.com/cloudify-cosmo/cloudify-cluster-manager/${branchName}/packaging/version_info')"
    echo "\$CLOUDIFY_CLUSTER_MANAGER_VERSION"
  """
}

def getUploadPath(){
    if (env.BRANCH_NAME == 'master') {
        return env.S3_DEV_RELEASE_PATH
    } else {
        return env.S3_BUILD_PATH
    }
}

def buildClusterManagerRPM(String version, String prerelease, String branchName='master'){
  container('rpmbuild'){
    sh """
      cd ~/rpmbuild
      mkdir -p SOURCES && cp -rf ${env.WORKSPACE}/cloudify-cluster-manager/* SOURCES && cd SOURCES
    """
    
    echo 'Build Cloudify Cluster Manager RPM'
    buildRpm('~/rpmbuild/SOURCES', 'cloudify-cluster-manager.spec', "${version}", "${prerelease}")

    echo 'Copy RPM to rpm folder'
    sh("mkdir -p ${env.WORKSPACE}/rpm && cp -rf /root/rpmbuild/RPMS/x86_64/. ${env.WORKSPACE}/rpm")
  }
}

@Library('pipeline-shared-library') _

pipeline {
  agent {
    kubernetes {
      defaultContainer "jnlp"
      yamlFile "jenkins/build-pod.yaml"
    }
  }

  options {
    checkoutToSubdirectory('cloudify-cluster-manager')
    buildDiscarder(logRotator(numToKeepStr:'10'))
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
  }

  environment {
    BRANCH = "${env.BRANCH_NAME}"
    PROJECT = "cloudify-cluster-manager"
    VERSION=getClusterManagerVersion("${env.BRANCH_NAME}").trim()
    PRERELEASE = ".dev1"
    S3_BUILD_PATH = "${env.PROJECT}/${env.VERSION}/${env.PRERELEASE}-build/${env.BRANCH}/${env.BUILD_NUMBER}"
    S3_RELEASE_PATH = "${env.PROJECT}/${env.VERSION}/ga-release"
    S3_DEV_RELEASE_PATH = "${env.PROJECT}/${env.VERSION}/${env.PRERELEASE}-release"
  }

  stages{
    stage('Prepare') {
      steps {
        container('python'){
          sh '''
            apt-get update
            apt-get install libldap-dev libsasl2-dev
            virtualenv ~/venv
          '''
        }
      }
    }
    stage('flake8'){
      steps{
        sh script: "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8", label: "copying repo to seperate workspace"

        container('python'){
          dir("${env.WORKSPACE}/flake8") {
            echo 'install flake 8'
            sh 'pip install flake8 --user'
            echo 'run flake8'
            sh 'python -m flake8 cfy_cluster_manager tests'
          }
        }
      }
    }
    stage('py3 compat'){
      steps {
        sh script: "mkdir -p ${env.WORKSPACE}/py3_compat && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/py3_compat", label: "copying repo to seperate workspace"

        container('python-old'){
          dir("${env.WORKSPACE}/py3_compat") {
            echo 'install futurize and find python3-incompatible code'
            sh '''#!/bin/bash
              pip install future --user
              PATH=$PATH:~/.local/bin

              FUTURIZE="futurize ."
              while read line; do
              [[ "$line" =~ ^#.* ]] && continue
              FUTURIZE="${FUTURIZE} ${line}"
              done<jenkins/py3fixers
              $FUTURIZE>futurize_diffs
            '''

            echo 'check that there is no python3-incompatible code'
            sh '''#!/bin/bash
                if [[ -s futurize_diffs ]]; then
                echo "Python-3-incompatible code found"
                cat futurize_diffs
                exit 1
                fi
            '''
          }
        }
      }
    }
    stage('Run Tests'){
      steps{
        sh script: "mkdir -p ${env.WORKSPACE}/test-cfy-cluster-manager && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/test-cfy-cluster-manager", label: "copying repo to seperate workspace"
        container('python'){
          dir("${env.WORKSPACE}/test-cfy-cluster-manager") {
            sh script: '''
              ~/venv/bin/pip install -Ur dev-requirements.txt
              ~/venv/bin/pip install -Ur test-requirements.txt
              ~/venv/bin/pip install -e .
            ''', label: "installing requirements for pytest"
            echo 'Running pytest'
            sh '~/venv/bin/pytest tests'
          }
        }
      }
    }
    stage('Build RPM'){
      when { not { branch pattern: ".+-build", comparator: "REGEXP" } }
      steps{
        buildClusterManagerRPM("${env.VERSION}", "${env.PRERELEASE}", "${env.BRANCH}")
      }
      post {
        success {
          echo 'Upload artifacts to S3'
          uploadToReleaseS3("${env.WORKSPACE}/rpm/", getUploadPath())
        }
      }
    }
    stage('Release Cloudify Cluster Manager'){
      when { branch pattern: ".+-build", comparator: "REGEXP" }
      steps{
        buildClusterManagerRPM("${env.VERSION}", "ga", "${env.BRANCH}")
      }
      post {
        success {
          echo 'Upload artifacts to S3'
          uploadToReleaseS3("${env.WORKSPACE}/rpm/", "${env.S3_RELEASE_PATH}")
        }
      }
    }
    stage('Upload Cloudify Cluster Manager package to PyPI') {
      when { branch pattern: ".+-build", comparator: "REGEXP" }
      steps {
        echo 'Upload Cloudify Cluster Manager package to PyPI'
        build job: 'upload-to-pypi', parameters: [
          string(name: 'BRANCH', value: "${env.BRANCH}"),
          string(name: 'GITHUB_PROJECT_URL', value: "https://github.com/cloudify-cosmo/cloudify-cluster-manager.git"),
          string(name: 'BUILD_BRANCH', value: "master"),
          booleanParam(name: 'VALIDATE_PACKAGE', value: true)
        ]
      }
    }
  }
}
